{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["onCarouselChange","a","b","c","console","log","listData","title","App","isListAvailable","length","react_default","createElement","className","card","carousel","autoplay","afterChange","dotPosition","list","grid","gutter","xs","sm","md","lg","xl","xxl","itemLayout","size","pagination","onChange","page","pageSize","dataSource","renderItem","item","Item","hoverable","cover","alt","src","actions","icon","type","Meta","avatar","description","empty","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAMA,SAASA,EAAiBC,EAAGC,EAAGC,GAC9BC,QAAQC,IAAIJ,EAAGC,EAAGC,GAGpB,IAAMG,EAAW,CACf,CACEC,MAAO,WAET,CACEA,MAAO,WAET,CACEA,MAAO,WAET,CACEA,MAAO,WAET,CACEA,MAAO,WAET,CACEA,MAAO,WAET,CACEA,MAAO,WAET,CACEA,MAAO,WAET,CACEA,MAAO,WAET,CACEA,MAAO,aAmFIC,MA9Ef,WAEE,IAAMC,EAAkBH,EAASI,OAAS,EAE1C,OACEC,EAAAV,EAAAW,cAAA,OAAKC,UAAU,OACbF,EAAAV,EAAAW,cAACE,EAAA,EAAD,CAAMP,MAAM,cAEVI,EAAAV,EAAAW,cAACG,EAAA,EAAD,CAAUC,UAAQ,EAACC,YAAajB,EAAkBkB,YAAa,OAC7DP,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAAA,gBAEFD,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAAA,gBAEFD,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAAA,gBAEFD,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAAA,iBAIHH,EAEGE,EAAAV,EAAAW,cAACO,EAAA,EAAD,CACIC,KAAM,CACJC,OAAQ,GACRC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,IAAK,GAEPC,WAAW,aACXC,KAAK,QACLC,WAAY,CACVC,SAAU,SAAAC,GACR5B,QAAQC,IAAI2B,IAEdC,SAAU,GAEZC,WAAY5B,EAMZ6B,WAAY,SAAAC,GAAI,OACZzB,EAAAV,EAAAW,cAACO,EAAA,EAAKkB,KAAN,KACE1B,EAAAV,EAAAW,cAACE,EAAA,EAAD,CACIwB,WAAS,EACTC,MACE5B,EAAAV,EAAAW,cAAA,OACI4B,IAAI,UACJC,IAAI,wEAGVC,QAAS,CAAC/B,EAAAV,EAAAW,cAAC+B,EAAA,EAAD,CAAMC,KAAK,YAAajC,EAAAV,EAAAW,cAAC+B,EAAA,EAAD,CAAMC,KAAK,SAAUjC,EAAAV,EAAAW,cAAC+B,EAAA,EAAD,CAAMC,KAAK,eAEpEjC,EAAAV,EAAAW,cAACE,EAAA,EAAK+B,KAAN,CACIC,OAAQnC,EAAAV,EAAAW,cAACkC,EAAA,EAAD,CAAQL,IAAI,qEACpBlC,MAAO6B,EAAK7B,MACZwC,YAAY,iCAO5BpC,EAAAV,EAAAW,cAACoC,EAAA,EAAD,SCvGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAV,EAAAW,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f81ba7d2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {List, Card, Avatar, Icon, Empty, Carousel} from \"antd\";\n\n\nfunction onCarouselChange(a, b, c) {\n  console.log(a, b, c);\n}\n\nconst listData = [\n  {\n    title: 'Title 1',\n  },\n  {\n    title: 'Title 2',\n  },\n  {\n    title: 'Title 3',\n  },\n  {\n    title: 'Title 4',\n  },\n  {\n    title: 'Title 5',\n  },\n  {\n    title: 'Title 6',\n  },\n  {\n    title: 'Title 7',\n  },\n  {\n    title: 'Title 8',\n  },\n  {\n    title: 'Title 9',\n  },\n  {\n    title: 'Title 10',\n  },\n];\n\n\nfunction App() {\n\n  const isListAvailable = listData.length > 0;\n\n  return (\n    <div className=\"App\">\n      <Card title=\"Card Title\">\n\n        <Carousel autoplay afterChange={onCarouselChange} dotPosition={'top'}>\n          <div>\n            <h3>1</h3>\n          </div>\n          <div>\n            <h3>2</h3>\n          </div>\n          <div>\n            <h3>3</h3>\n          </div>\n          <div>\n            <h3>4</h3>\n          </div>\n        </Carousel>\n\n        {isListAvailable ?\n\n            <List\n                grid={{\n                  gutter: 16,\n                  xs: 1,\n                  sm: 2,\n                  md: 2,\n                  lg: 4,\n                  xl: 4,\n                  xxl: 4,\n                }}\n                itemLayout=\"horizontal\"\n                size=\"small\"\n                pagination={{\n                  onChange: page => {\n                    console.log(page);\n                  },\n                  pageSize: 8,\n                }}\n                dataSource={listData}\n                // footer={\n                //   <div>\n                //     <b>ant design</b> footer part\n                //   </div>\n                // }\n                renderItem={item => (\n                    <List.Item>\n                      <Card\n                          hoverable\n                          cover={\n                            <img\n                                alt=\"example\"\n                                src=\"https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png\"\n                            />\n                          }\n                          actions={[<Icon type=\"setting\"/>, <Icon type=\"edit\"/>, <Icon type=\"ellipsis\"/>]}\n                      >\n                        <Card.Meta\n                            avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"/>}\n                            title={item.title}\n                            description=\"This is the description\"\n                        />\n                      </Card>\n                    </List.Item>\n                )}\n            />\n            :\n            <Empty/>\n        }\n        </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}